// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/12/2018 16:57:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ArithmaticLogicUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ArithmaticLogicUnit_vlg_sample_tst(
	AC,
	ALU_X,
	BUS,
	CLK,
	DR,
	INPR,
	sampler_tx
);
input [3:0] AC;
input [3:0] ALU_X;
input [3:0] BUS;
input  CLK;
input [3:0] DR;
input [3:0] INPR;
output sampler_tx;

reg sample;
time current_time;
always @(AC or ALU_X or BUS or CLK or DR or INPR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ArithmaticLogicUnit_vlg_check_tst (
	E,
	Output,
	sampler_rx
);
input  E;
input [3:0] Output;
input sampler_rx;

reg  E_expected;
reg [3:0] Output_expected;

reg  E_prev;
reg [3:0] Output_prev;

reg  E_expected_prev;
reg [3:0] Output_expected_prev;

reg  last_E_exp;
reg [3:0] last_Output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	E_prev = E;
	Output_prev = Output;
end

// update expected /o prevs

always @(trigger)
begin
	E_expected_prev = E_expected;
	Output_expected_prev = Output_expected;
end



// expected E
initial
begin
	E_expected = 1'bX;
end 
// expected \Output [ 3 ]
initial
begin
	Output_expected[3] = 1'bX;
end 
// expected \Output [ 2 ]
initial
begin
	Output_expected[2] = 1'bX;
end 
// expected \Output [ 1 ]
initial
begin
	Output_expected[1] = 1'bX;
end 
// expected \Output [ 0 ]
initial
begin
	Output_expected[0] = 1'bX;
end 
// generate trigger
always @(E_expected or E or Output_expected or Output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected E = %b | expected Output = %b | ",E_expected_prev,Output_expected_prev);
	$display("| real E = %b | real Output = %b | ",E_prev,Output_prev);
`endif
	if (
		( E_expected_prev !== 1'bx ) && ( E_prev !== E_expected_prev )
		&& ((E_expected_prev !== last_E_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_E_exp = E_expected_prev;
	end
	if (
		( Output_expected_prev[0] !== 1'bx ) && ( Output_prev[0] !== Output_expected_prev[0] )
		&& ((Output_expected_prev[0] !== last_Output_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Output_exp[0] = Output_expected_prev[0];
	end
	if (
		( Output_expected_prev[1] !== 1'bx ) && ( Output_prev[1] !== Output_expected_prev[1] )
		&& ((Output_expected_prev[1] !== last_Output_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Output_exp[1] = Output_expected_prev[1];
	end
	if (
		( Output_expected_prev[2] !== 1'bx ) && ( Output_prev[2] !== Output_expected_prev[2] )
		&& ((Output_expected_prev[2] !== last_Output_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Output_exp[2] = Output_expected_prev[2];
	end
	if (
		( Output_expected_prev[3] !== 1'bx ) && ( Output_prev[3] !== Output_expected_prev[3] )
		&& ((Output_expected_prev[3] !== last_Output_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Output_exp[3] = Output_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ArithmaticLogicUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] AC;
reg [3:0] ALU_X;
reg [3:0] BUS;
reg CLK;
reg [3:0] DR;
reg [3:0] INPR;
// wires                                               
wire E;
wire [3:0] Output;

wire sampler;                             

// assign statements (if any)                          
ArithmaticLogicUnit i1 (
// port map - connection between master ports and signals/registers   
	.AC(AC),
	.ALU_X(ALU_X),
	.BUS(BUS),
	.CLK(CLK),
	.DR(DR),
	.E(E),
	.INPR(INPR),
	.\Output (Output)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 
// AC[ 3 ]
initial
begin
	AC[3] = 1'b1;
	AC[3] = #80000 1'b0;
end 
// AC[ 2 ]
initial
begin
	AC[2] = 1'b1;
	AC[2] = #80000 1'b0;
end 
// AC[ 1 ]
initial
begin
	AC[1] = 1'b1;
	AC[1] = #80000 1'b0;
end 
// AC[ 0 ]
initial
begin
	AC[0] = 1'b1;
	AC[0] = #80000 1'b0;
end 
// ALU_X[ 3 ]
initial
begin
	ALU_X[3] = 1'b0;
end 
// ALU_X[ 2 ]
initial
begin
	ALU_X[2] = 1'b1;
	ALU_X[2] = #80000 1'b0;
end 
// ALU_X[ 1 ]
initial
begin
	ALU_X[1] = 1'b0;
end 
// ALU_X[ 0 ]
initial
begin
	ALU_X[0] = 1'b0;
end 
// BUS[ 3 ]
initial
begin
	BUS[3] = 1'b0;
end 
// BUS[ 2 ]
initial
begin
	BUS[2] = 1'b0;
end 
// BUS[ 1 ]
initial
begin
	BUS[1] = 1'b0;
end 
// BUS[ 0 ]
initial
begin
	BUS[0] = 1'b0;
end 
// DR[ 3 ]
initial
begin
	DR[3] = 1'b0;
end 
// DR[ 2 ]
initial
begin
	DR[2] = 1'b0;
end 
// DR[ 1 ]
initial
begin
	DR[1] = 1'b0;
end 
// DR[ 0 ]
initial
begin
	DR[0] = 1'b1;
	DR[0] = #80000 1'b0;
end 
// INPR[ 3 ]
initial
begin
	INPR[3] = 1'b0;
end 
// INPR[ 2 ]
initial
begin
	INPR[2] = 1'b0;
end 
// INPR[ 1 ]
initial
begin
	INPR[1] = 1'b0;
end 
// INPR[ 0 ]
initial
begin
	INPR[0] = 1'b0;
end 

ArithmaticLogicUnit_vlg_sample_tst tb_sample (
	.AC(AC),
	.ALU_X(ALU_X),
	.BUS(BUS),
	.CLK(CLK),
	.DR(DR),
	.INPR(INPR),
	.sampler_tx(sampler)
);

ArithmaticLogicUnit_vlg_check_tst tb_out(
	.E(E),
	.Output(Output),
	.sampler_rx(sampler)
);
endmodule

