// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2018 19:06:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Common_Bus_System
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Common_Bus_System_vlg_sample_tst(
	CLK,
	CLR,
	DataIn,
	INR,
	LD,
	m,
	RW,
	S,
	sampler_tx
);
input  CLK;
input [3:0] CLR;
input [3:0] DataIn;
input [3:0] INR;
input [3:0] LD;
input  m;
input  RW;
input [2:0] S;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLR or DataIn or INR or LD or m or RW or S)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Common_Bus_System_vlg_check_tst (
	DataOut,
	result,
	sampler_rx
);
input [3:0] DataOut;
input [3:0] result;
input sampler_rx;

reg [3:0] DataOut_expected;
reg [3:0] result_expected;

reg [3:0] DataOut_prev;
reg [3:0] result_prev;

reg [3:0] DataOut_expected_prev;
reg [3:0] result_expected_prev;

reg [3:0] last_DataOut_exp;
reg [3:0] last_result_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	DataOut_prev = DataOut;
	result_prev = result;
end

// update expected /o prevs

always @(trigger)
begin
	DataOut_expected_prev = DataOut_expected;
	result_expected_prev = result_expected;
end


// expected DataOut[ 3 ]
initial
begin
	DataOut_expected[3] = 1'bX;
end 
// expected DataOut[ 2 ]
initial
begin
	DataOut_expected[2] = 1'bX;
end 
// expected DataOut[ 1 ]
initial
begin
	DataOut_expected[1] = 1'bX;
end 
// expected DataOut[ 0 ]
initial
begin
	DataOut_expected[0] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 
// generate trigger
always @(DataOut_expected or DataOut or result_expected or result)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DataOut = %b | expected result = %b | ",DataOut_expected_prev,result_expected_prev);
	$display("| real DataOut = %b | real result = %b | ",DataOut_prev,result_prev);
`endif
	if (
		( DataOut_expected_prev[0] !== 1'bx ) && ( DataOut_prev[0] !== DataOut_expected_prev[0] )
		&& ((DataOut_expected_prev[0] !== last_DataOut_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataOut_expected_prev);
		$display ("     Real value = %b", DataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataOut_exp[0] = DataOut_expected_prev[0];
	end
	if (
		( DataOut_expected_prev[1] !== 1'bx ) && ( DataOut_prev[1] !== DataOut_expected_prev[1] )
		&& ((DataOut_expected_prev[1] !== last_DataOut_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataOut_expected_prev);
		$display ("     Real value = %b", DataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataOut_exp[1] = DataOut_expected_prev[1];
	end
	if (
		( DataOut_expected_prev[2] !== 1'bx ) && ( DataOut_prev[2] !== DataOut_expected_prev[2] )
		&& ((DataOut_expected_prev[2] !== last_DataOut_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataOut_expected_prev);
		$display ("     Real value = %b", DataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataOut_exp[2] = DataOut_expected_prev[2];
	end
	if (
		( DataOut_expected_prev[3] !== 1'bx ) && ( DataOut_prev[3] !== DataOut_expected_prev[3] )
		&& ((DataOut_expected_prev[3] !== last_DataOut_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataOut_expected_prev);
		$display ("     Real value = %b", DataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataOut_exp[3] = DataOut_expected_prev[3];
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Common_Bus_System_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [3:0] CLR;
reg [3:0] DataIn;
reg [3:0] INR;
reg [3:0] LD;
reg m;
reg RW;
reg [2:0] S;
// wires                                               
wire [3:0] DataOut;
wire [3:0] result;

wire sampler;                             

// assign statements (if any)                          
Common_Bus_System i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLR(CLR),
	.DataIn(DataIn),
	.DataOut(DataOut),
	.INR(INR),
	.LD(LD),
	.m(m),
	.result(result),
	.RW(RW),
	.S(S)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 
// CLR[ 3 ]
initial
begin
	CLR[3] = 1'b0;
end 
// CLR[ 2 ]
initial
begin
	CLR[2] = 1'b0;
end 
// CLR[ 1 ]
initial
begin
	CLR[1] = 1'b0;
end 
// CLR[ 0 ]
initial
begin
	CLR[0] = 1'b0;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b1;
	DataIn[3] = #80000 1'b0;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b0;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b1;
	DataIn[1] = #80000 1'b0;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b0;
end 
// INR[ 3 ]
initial
begin
	INR[3] = 1'b0;
end 
// INR[ 2 ]
initial
begin
	INR[2] = 1'b0;
end 
// INR[ 1 ]
initial
begin
	INR[1] = 1'b0;
end 
// INR[ 0 ]
initial
begin
	INR[0] = 1'b0;
end 
// LD[ 3 ]
initial
begin
	LD[3] = 1'b0;
end 
// LD[ 2 ]
initial
begin
	LD[2] = 1'b1;
	LD[2] = #80000 1'b0;
	LD[2] = #80000 1'b1;
	LD[2] = #80000 1'b0;
end 
// LD[ 1 ]
initial
begin
	LD[1] = 1'b1;
	LD[1] = #80000 1'b0;
end 
// LD[ 0 ]
initial
begin
	LD[0] = 1'b0;
	LD[0] = #160000 1'b1;
	LD[0] = #80000 1'b0;
end 

// m
initial
begin
	m = 1'b0;
	m = #160000 1'b1;
	m = #80000 1'b0;
end 

// RW
initial
begin
	RW = 1'b1;
	RW = #80000 1'b0;
end 
// S[ 2 ]
initial
begin
	S[2] = 1'b1;
	S[2] = #80000 1'b0;
end 
// S[ 1 ]
initial
begin
	S[1] = 1'b1;
	S[1] = #80000 1'b0;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b0;
end 

Common_Bus_System_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLR(CLR),
	.DataIn(DataIn),
	.INR(INR),
	.LD(LD),
	.m(m),
	.RW(RW),
	.S(S),
	.sampler_tx(sampler)
);

Common_Bus_System_vlg_check_tst tb_out(
	.DataOut(DataOut),
	.result(result),
	.sampler_rx(sampler)
);
endmodule

